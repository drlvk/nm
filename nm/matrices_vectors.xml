<?xml version="1.0" encoding="UTF-8" ?>

<chapter xml:id="scalars-vectors-matrices" xmlns:xi="http://www.w3.org/2001/XInclude">

<title>Scalars, vectors and matrices</title>


    <introduction>
        <p>We will only need three types of Matlab objects: scalars, vectors, and matrices. A scalar is just a single number, like 2.75. Vectors and matrices deserve a more careful look. Being able to use them efficiently is a key to programming in Matlab. Note that <q>Mat</q> in <q>Matlab</q> stands for <q>matrix</q>, not <q>mathematics</q>.</p>
    </introduction>

<section xml:id="section-matlab-interface">
<title>Matlab interface</title>

<p>The first thing you see in Matlab is its <term>Command Window</term> where the prompt <c>>></c> invites you to enter any command that will be executed at once. This window is useful for quickly trying out things. You should use it to try out the one-line examples that appear in the text of these notes.</p>

<p>Most of our work, including homework assignments, will involve <term>Script Editor</term>. To open this editor, click <q>New Script</q> button on the left of the <q>Home</q> menu of Matlab. The chain of commands entered in the editor forms a script. The button <q>Run</q> of the <q>Editor</q> menu runs a script; pressing <kbd>F5</kbd> does the same. The output of the script computations is shown in the Command Window.</p> 
</section>

<section xml:id="section-scalars">
<title>Assigning scalar values</title>

<p>The command <cd>x = 3/4</cd> assigns the value of 0.75 to variable <c>x</c>. Matlab will also display the result of this assignment (the number 0.75) to you. Most of the time, we do not need it to print the result of every computation. Ending a command with a semicolon <kbd>;</kbd> suppresses the output: try <cd>x = 3/4;</cd></p>

<p>Now that the variable <c>x</c> has a value, we can use it in computations. For example, <cd>y = x^2 + 5*x - 1</cd> will result in <c>y</c> being assigned the value 3.3125. It is important to realize that every variable must be assigned a value before it can be used on the right hand side of an assignment. If we try to execute <c>y = x^2</c> without assigning any value to <c>x</c>, the result will be an error: <c>x</c> is undefined.  </p>
</section> 

<section xml:id="section-vectors-matrices">
<title>Creating vectors and matrices</title>    

<p>A <term>vector</term> in Matlab is an ordered list of numbers. It does not always have a geometric meaning. For example, recording the high temperature on every day of August, we get a vector with 31 components; we do not normally visualize it as an arrow of some length and direction. Matlab distinguishes between row vectors and column vectors, which are defined below.</p>

<p>A <term>matrix</term> is a rectangular array of numbers. For example, a 4<times/>6 matrix has 4 rows and 6 columns. A matrix with one row (for example a 1<times/>6 matrix) is a <term>row vector</term>. A matrix with one column (for example a 4<times/>1 matrix) is a <term>column vector</term>. Thus, vectors in Matlab are just a special kind of matrices.</p>

<p>One can create a row vector by listing its components: <cd>x = [8 6 7 5 3 0 9]</cd> or <cd>x = [8, 6, 7, 5, 3, 0, 9]</cd> Either spaces or columns can be used to separate the entries. To create a column vector, one can either separate the entries by semicolons: <cd>x = [8; 6; 7; 5; 3; 0; 9]</cd> or create a row vector and <term>transpose</term> it by putting an apostrophe at the end: <cd>x = [8 6 7 5 3 0 9]'</cd> </p>

<p>To create a matrix one needs both kinds of separators: spaces or colons within each row, and semicolons between the rows. For example, <cd>A = [8 6; 7 5; 3 0]'</cd> creates a 3<times/>2 matrix. Its transpose <c>A'</c> is a 2<times/>3 matrix, same as <cd>[8 6 7; 5 3 0]</cd></p>

<p><term>Regularly-spaced vectors</term> are described by three numbers: first entry, step size, and last entry. For example: <c>3:2:15</c> means the same as <c>[3 5 7 9 11 13 15]</c>: the first entry is 3, after that they increase by 2, until reaching 15. The step size can be omitted when it is equal to 1: that is, <c>-1:4</c> is the same as <c>[-1   0   1   2   3   4]</c>.</p>

<p><term>Zeros and ones</term> are special kinds of matrices and vectors, filled with the same number: 0 or 1. The commands are called <c>zeros</c> and <c>ones</c>. They require two parameters: the number of rows and the number of columns. For example, <c>zeros(2, 2)</c> creates a 2<times/>2 matrix filled with zeros, and <c>ones(1, 5)</c> is a row vector with 5 entries: <c>[1 1 1 1 1]</c>. These are useful as starting points for building matrices and vectors.</p>

</section>

<section xml:id="section-operations-vectors-matrices">
<title>Operations on vectors and matrices</title>  

<p><em>Addition</em> and <em>subtraction</em> works the same way as it does in Linear Algebra. If two vectors, or two matrices, have the same size, they can be added or subtracted. For example: 
<cd>
    x = [3 7 2];
    y = [8 -2 0];
    z = x + y;
</cd>
results in <c>z</c> being <c>[11 5 2]</c>. But we cannot add <c>[8 -2]</c> and <c>[2 5 8]</c> because these vectors have different sizes. 
</p> 

<p><em>Scalar multiplication</em> also works as expected: with <c>x</c> as above, <c>3*x</c> is the vector <c>[9 21 6]</c>.</p>

<p>One can also multiply two vectors, or two matrices, or a vector and a matrix. To understand how this works in Matlab, keep in mind that a vector is treated as a matrix with one row (or one column). Two matrices can be multiplied only when the inner dimensions agree: that is, two matrices of sizes <m>m\times n</m> and <m>p\times q</m> can be multiplied when <m>n = p</m>. The product has size <m>m\times q</m>. Some examples: <ul> 
<li><c>[3 7] * [4 2]</c> is <alert>an error</alert>: the first argument has size <m>1\times 2</m>, the second also has size <m>1\times 2</m>, and the inner dimensions do not agree: <m>2\ne 1</m>.</li>
<li><c>[3 7] * [4; 2]</c> is <c>26</c>. the first argument has size <m>1\times 2</m>, the second has size <m>2\times 1</m>, so the product is defined and has size <m>1\times 1</m> which makes it a scalar. This is how one computes the <term>scalar product</term> of two vectors: it comes from multiplying a row vector by a column vector.</li>
<li><c>[1 2 3; 4 5 6] * [-4; 0; 3]</c> is <c>[5; 2]</c>. The sizes <m>2\times 3</m> and <m>3\times 1</m> are compatible and the product has size <m>2\times 1</m>. This is how <term>matrix-vector</term> products work in linear algebra too: the vector, placed to the right of a matrix, must be written as a column.</li> 
<li><c>[5 -2] * [1 2 3; 4 5 6]</c> is <c>[-3 0 3]</c>. The sizes <m>1\times 2</m> and <m>2\times 3</m> are compatible and the product has size <m>1\times 3</m>. So, we can have a vector to the left of a matrix when it is a row vector. </li> 
<li><c>[0 1; -1 0] * [1 2 3; 4 5 6]</c> is <c>[4   5   6; -1  -2  -3]</c>. This is a <term>matrix product</term>. Two matrices have compatible sizes <m>2\times 2</m> and <m>2\times 3</m>, and the product is of size <m>2\times 3</m>.</li>
</ul></p>

</section>

<section xml:id="section-indexing-vectors-matrices">
<title>Accessing the entries of vectors and matrices</title>  

<p>We often need to manipulate matrices and vectors by extracting, replacing or rearranging some elements. The elements are indexed <em>starting with 1</em>: so, after executing <c>v = [8 6 -4]</c> we find that <c>v(1)</c> is 8, <c>v(2)</c> is 6, and <c>v(3)</c> is -4. One can also use indexing from the end of the vector: <c>v(end)</c> is -4, <c>v(end-1)</c> is 6, and so on. For a matrix the indexes are ordered as (row, column). So, if <c>A = [5 6 7; 9 8 6]</c>, then <c>A(1, 3)</c> is 7 and <c>A(2, 1)</c> is 9. 
</p> 

<p>A powerful tool for working with matrices is the <term>colon : selector</term>. When it replaces an index, it means <q>run through all values of that index</q>. Given a matrix A, we can use <c>A(1, :)</c> to get its first row, <c>A(:, 2)</c> to get the second column, and <c>A(:, end)</c> for the last column.</p> 

<p>We can use a <term>vector of indexes</term> to extract several elements of a vector or a matrix. For example, <c>v(3:end-1)</c> extracts all entries of <c>v</c> starting with the 3rd one and ending with the one before the last. If <c>v</c> was <c>[8 6 4 3 2 1]</c>, the result would be <c>[4 3 2]</c>. For another example, <c>v(2:2:end)</c> extracts all even-numbered elements of v. In the above example this would be <c>[6 3 1]</c>. For a matrix <c>A</c>, we can select both rows and columns at the same time: <c>A(2:3, 2:5)</c> means taking the elements of <c>A</c> that appear in rows 2-3 and in columns 2-5. The result is a submatrix of size 2<times/>4.</p>

<p>The entries can also be assigned, for example <c>v(2:2:end) = -3</c> makes all even-numbered entries of vector <c>v</c> equal to -3. </p> 
</section>


<section xml:id="section-examples">

<title>Examples</title>  

<p> When reading each example, try to find your own solution before clicking the <q>Answer</q> link. </p>

<example>
	<title>Scalar product of two vectors</title>
<statement>
	<p>Write a script that calculates and displays the scalar product of two vectors: [1 2 ... n] and [n n-1 ... 1]. Use the first two digits of SUID as your value of n.</p>
</statement> 
<answer>
<pre>
n = 28;
u = 1:n;
v = n:-1:1;
disp(u*v')
</pre>
<p> <em>Explanation</em>. 
Recall from <xref ref="section-vectors-matrices"/> that <c>a:h:b</c> means a regularly spaced vector whose entries start with <c>a</c>, and then change by amount <c>h</c> until reaching <c>b</c>. When <c>h</c> is omitted, it is understood to be 1. So, this code makes <c>u</c> equal to [1 2 ... 28] and <c>v</c> equal to [28 27 ... 1]. Both are row vectors. Transposing the second vector into a column is necessary for their product to make sense, as noted in <xref ref="section-operations-vectors-matrices" />. Note that each of these lines ends with a semicolon, which prevents the intermediate results from being displayed on screen. Then <c>disp</c> displays the final result.
</p>
</answer>
</example>


<example>
	<title>Create a vector for use in Simpson's method</title>
<statement>
	<p>Write a script that creates and displays a row vector with 25 elements of the form [1 4 2 4 2 ... 2 4 1]. This particular sequence of numbers is used in <q>Simpson's Method</q> of numerical integration which we will encounter later.</p>
</statement>
<answer>
<pre>
v = ones(1, 25);
v(2:2:end) = 4;
v(3:2:end-2) = 2;
disp(v)		
</pre>
<p> <em>Explanation</em>. 
The first line creates a vector of 25 ones, the second changes its even-numbered entries to 4, the third changes odd-numbered entries (except the first and last) to 2. Re-read <xref ref="section-indexing-vectors-matrices" /> if this is unclear.  
</p>
</answer>
</example> 
 
<example>
	<title>Checkerboard matrix</title>
<statement>
	<p>Create and display a <q>checkerboard</q> matrix of size 8<times/>8: it should look like
<cd>
1 0 1 0 ...
0 1 0 1 ...
1 0 1 0 ...
...........
</cd>
</p>
</statement>

<answer>
<pre>
A = zeros(8, 8);
A(1:2:end, 1:2:end) = 1;
A(2:2:end, 2:2:end) = 1;
disp(A)
</pre>
<p> <em>Explanation</em>. 
The first line creates an 8<times/>8 matrix of zeros. The second works with the entries where both the row number and column number are <em>odd</em>, changing them to 1. The third does the same when both row and column numbers are <em>even</em>. The result is a checkerboard.
</p>
</answer>
</example> 

</section>
 

<exercises xml:id="exercises-matrices-vectors">
    <title>Homework</title>

    <exercise number="1">
        <statement>
<p>Suppose that <c>A</c> is a matrix. Describe, in words, the following objects: 
<ol label="(a)">
<li><c>A(3, :)</c></li>
<li><c>A(:, end-2)</c></li>
<li><c>A(1:2, end-1:end)</c></li>
<li><c>A(1:2:end, 1)</c></li>
<li><c>A(:, end:-1:1)</c></li>
</ol>
</p>
        </statement>
    </exercise>

    <exercise number="2">
        <statement>
            <p>Write a script to do the following: </p>
<pre>
x = (first 5 digits of your SUID);
y = (all entries of x except first); 
z = (all entries of x except last);
u = (the average of vectors y and z);
v = (the scalar product of y and z);
disp(u, v)
</pre>
<p>
Note that <c>y</c> and <c>z</c> must be computed from the vector x, not entered number-by-number. 
</p>        </statement>
    </exercise>

    <exercise number="3">
        <statement>
            <p>Write a script that does the following: 
<ol label="(a)">
<li> Let <c>A</c> be some 3 by 3 matrix filled with numbers 1,2,<ellipsis/>,9</li>
<li> Let <c>x</c> be the product of A and a row vector with all entries equal to 1 (think about the correct order of multiplication).</li> 
<li> Let <c>y</c> be the product of A and a column vector with all entries equal to 1.</li>
</ol>

When uploading your script to Blackboard, leave a comment with answers to the following questions: 
<ol label="(a)">
<li> What is the meaning of the entries of x? In other words, what information about A do we get from the entries of x?</li>
<li> What is the meaning of the entries of y? </li>
</ol>
</p>
        </statement>
        <hint>Both x and y represent certain <em>sums</em>.</hint>
    </exercise>
 
</exercises>

</chapter>
