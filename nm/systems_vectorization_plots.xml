<?xml version="1.0" encoding="UTF-8" ?>

<chapter xml:id="scalars-vectors-matrices" xmlns:xi="http://www.w3.org/2001/XInclude">

<title>Linear systems, vectorization, plots</title>


    <introduction>
        <p>The goal of this class is to learn basic ways in which vectors and matrices are used:
        	solving the systems of linear equations; performing computations with many numbers at once; and graphing functions.</p>
    </introduction>

<section xml:id="section-linear-systems">
<title>Systems of linear equations</title>

<p>A system of linear equations, such as 
<md>
	<mrow>3x_1 - 2x_2 \amp = 6 </mrow>
	<mrow>2x_1 + 5x_2 \amp = -3 </mrow>
</md>
can be written in matrix form as <m>Ax=b</m> where <m>A</m> is the matrix of coefficients,
<me>A = \begin{pmatrix} 3 \amp -2 \\ 2 \amp 5 \end{pmatrix}</me>
and <m>b</m> is the <em>column</em> vector on the right-hand side: 
<me>b = \begin{pmatrix} 6  \\ -3 \end{pmatrix}</me>
The Matlab command for solving <m>Ax=b</m> is very short: <cd>x = A\b</cd> The result is the column vector <c>[1.2632; -1.1053]</c>, meaning that <m>x_1\approx 1.2632</m> and <m>x_2 \approx -1.1053</m>.
</p>

<p> Mathematically, <m>x</m> could be found as <m>x = A^{-1}b</m> where <m>A^{-1}</m> is the inverse matrix. However, this is not a computationally efficient way to solve a linear system. Matlab does not actually compute the inverse matrix when solving a linear system. It chooses one of several algorithms based on the nature of the matrix; usually it is a form of <q>LU factorization</q> which is discussed in MAT 532. But even though the formula <m>x = A^{-1}b</m> 
is not actually used, it suggests the notation used by Matlab. For two numbers <m>a, b</m> we can write <m>ba^{-1}</m> as <c>b/a</c>, meaning <m>b</m> divided by <m>a</m>. If the order of multiplication was important (as it is for matrices), then perhaps <m>a^{-1}b</m> could be written as <c>a\b</c>, meaning <m>b</m> divided by <m>a</m> <em>from the left</em>. We do not actually <q>divide a vector by a matrix</q> but the notation <c>A\b</c> can remind us of <m>A^{-1}b</m>.</p> 

</section>

<section xml:id="section-large-matrices">
<title>More tools for constructing matrices</title>

<p>The number of coefficients in a linear system grows rapidly with its size: a system with 20 equations and 20 variables has a matrix with 400 coefficients. Entering these by hand would be tedious. We already have two ways to construct large matrices: <c>zeros(m, n)</c> and <c>ones(m, n)</c> but these are not invertible matrices. This section presents two other useful constructions. </p>

<p>The <term>identity matrix</term> is usually denoted <m>I</m> in mathematics, or <m>I_n</m> if it is necessary to emphasize its size. For example, 
<me>I_3 = \begin{pmatrix} 1 \amp 0\amp 0 \\ 0\amp 1\amp 0 \\ 0\amp 0\amp 1 \end{pmatrix}</me>
In Matlab this matrix would be created as <c>eye(3)</c>. The name of the command was chosen because <q>eye</q> is pronounced the same as <q>I</q>. We also get scalars multiples of the identity matrix, for example <c>5*eye(3)</c> is  
<me> \begin{pmatrix} 5 \amp 0\amp 0 \\ 0\amp 5\amp 0 \\ 0\amp 0\amp 5 \end{pmatrix}</me>
</p>


<p>A <term>diagonal matrix</term> has zeros everywhere except on the main diagonal. The identity matrix <m>I</m> is a special case of a diagonal matrix. In Matlab, the command <c>diag(v)</c> creates a diagonal matrix which has the elements of vector <c>v</c> on its main diagonal. For example, <c>diag([6 -4 7])</c> creates the matrix
<me>\begin{pmatrix} 6 \amp 0\amp 0 \\ 0\amp -4\amp 0 \\ 0\amp 0\amp 7 \end{pmatrix}</me>
</p>

<p>Some problems in engineering and in differential equations lead to matrices where nonzero coefficients are <em>close</em> to the main diagonal but not exactly at it: for example, 
<me>\begin{pmatrix}
	2 \amp -1 \amp 0\amp 0 \amp 0 \\ 
	-1 \amp 2 \amp -1\amp 0 \amp 0 \\ 
	0 \amp -1 \amp 2\amp -1 \amp 0 \\ 
	0 \amp 0 \amp -1\amp 2 \amp -1 \\ 
	0 \amp 0 \amp 0\amp -1 \amp 2 \\ 
\end{pmatrix}</me>
To construct such matrices we can use <c>diag(v, k)</c> which places the elements of vector <c>v</c> on the diagonal parallel to the main one but <m>k</m> positions above it. So, <c>diag(v, 1)</c> is just above the main diagonal and <c>diag(v, -1)</c> is just below. The matrix shown above could be formed as 
<cd> diag([2 2 2 2 2]) - diag([1 1 1 1], 1) - diag([1 1 1 1], -1)</cd>
This is an example of a <term>tridiagonal matrix</term>: there are only three diagonals with nonzero entries.</p>

<example><title>Tridiagonal matrix of arbitrary size</title>
<statement> Given a positive integer <m>n</m>, construct a tridiagonal matrix of the above form with size <m>n\times n</m>. </statement>
<answer>
<pre>2*diag(ones(1, n)) - diag(ones(1, n-1), 1) - diag(ones(1, n-1), -1)</pre>
<p>Note why <c>n-1</c> appears above: the main diagonal has length <c>n</c> but the diagonals next to it have length <c>n-1</c>. </p>
</answer>
</example>

</section>


</chapter>
